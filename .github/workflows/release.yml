name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Run the same checks as CI before release
  pre-release-checks:
    name: Pre-release Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run all checks
        run: bun run check:all

  # Build for multiple platforms
  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: [pre-release-checks]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: linux
          - os: macos-latest
            target: darwin
          - os: windows-latest
            target: windows
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build for ${{ matrix.target }}
        run: bun run build

      - name: Create release archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          tar -czf gi-${{ matrix.target }}.tar.gz -C dist .

      - name: Create release archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path dist\* -DestinationPath gi-${{ matrix.target }}.zip

      - name: Upload release artifacts (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: gi-${{ matrix.target }}
          path: gi-${{ matrix.target }}.tar.gz
          retention-days: 30

      - name: Upload release artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: gi-${{ matrix.target }}
          path: gi-${{ matrix.target }}.zip
          retention-days: 30

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-release]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate release notes
        id: release-notes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            echo "## Changes since $LAST_TAG" > release_notes.md
            git log --pretty=format:"- %s (%an)" "$LAST_TAG"..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "First release of the Gerrit CLI tool with comprehensive security improvements." >> release_notes.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-notes.outputs.version }}
          name: Release ${{ steps.release-notes.outputs.version }}
          body_path: release_notes.md
          files: |
            artifacts/gi-linux/gi-linux.tar.gz
            artifacts/gi-darwin/gi-darwin.tar.gz
            artifacts/gi-windows/gi-windows.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}